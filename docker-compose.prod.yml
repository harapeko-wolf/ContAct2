version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    environment:
      - NODE_ENV=production
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=${DB_HOST}
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - MAIL_MAILER=${MAIL_MAILER}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    restart: unless-stopped

  # 🎯 本番環境でも自動Cron
  cron:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    environment:
      - APP_ENV=production
      - DB_CONNECTION=mysql
      - DB_HOST=${DB_HOST}
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    restart: unless-stopped
    command: >
      sh -c "
        echo '* * * * * cd /var/www/html && php artisan schedule:run >> /var/log/cron.log 2>&1' > /etc/crontabs/root &&
        echo 'Production Cron started' &&
        crond -f -l 2
      "
    volumes:
      - cron_logs:/var/log

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    restart: unless-stopped
    depends_on:
      - frontend
      - backend

volumes:
  cron_logs: 